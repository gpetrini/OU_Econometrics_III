#+TITLE: Problem Set 3 Solution
#+AUTHOR: Gabriel Petrini
#+DATE: September 15th, 2020
#+LATEX_HEADER: \usepackage[american]{babel}
#+LATEX_HEADER: \usepackage{minted}
#+PROPERTY: header-args:julia :eval no :session *julia* :tangle ../ProblemSets/Sol_PS3.jl

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>

#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>

#+BEGIN_SRC julia
function wrapall()
#+END_SRC

* Question

Estimate a multinomial logit (with alternative-specific covariates $Z$) on the following data set:

#+BEGIN_SRC julia
url = "https://raw.githubusercontent.com/OU-PhD-Econometrics/fall-2020/master/ProblemSets/PS3-gev/nlsw88w.csv"
df = CSV.read(HTTP.get(url).body)
X = [df.age df.white df.collgrad]
Z = hcat(df.elnwage1, df.elnwage2, df.elnwage3, df.elnwage4, 
         df.elnwage5, df.elnwage6, df.elnwage7, df.elnwage8)
y = df.occupation
#+END_SRC

the choice set represents possible occupations and is structured  as follows.

1. Professional/Technical 
2. Managers/Administrators
3. Sales                  
4. Clerical/Unskilled     
5. Craftsmen              
6. Operatives             
7. Transport              
8. Other                  

*Hints:*

- Index the parameter vector so that the coefficient on $Z$ is the last element and the coefficients on $X$ are the first set of elements.
- You will need to difference the $Z$'s in your likelihood function. 
- Normalize $\beta_J = 0$
- The formula for the choice probabilities will thus be
    \begin{align*}
        P_{ij} &= \begin{cases} \frac{\exp\left(X_{i}\beta_j + \gamma(Z_{ij}-Z_{iJ})\right)}{1+\sum_{k=1}^{J-1}\exp\left(X_{i}\beta_k + \gamma(Z_{ik}-Z_{iJ})\right)} ,& j=1,\ldots,J-1\\
         \frac{1}{1+\sum_{k=1}^{J-1}\exp\left(X_{i}\beta_k + \gamma(Z_{ik}-Z_{iJ})\right)} ,& j=J
         \end{cases}
    \end{align*}

** Solution


#+BEGIN_SRC julia
using Random
using LinearAlgebra
using Statistics
using Optim
using DataFrames
using CSV
using HTTP
using GLM
using FreqTables
using ForwardDiff # for bonus at the very end


function mlogit_with_Z(theta, X, Z, y)
        
        alpha = theta[1:end-1]
        gamma = theta[end] # Indexing Z variables at the end
        K = size(X,2) # N Variables
        J = length(unique(y))
        N = length(y)
        bigY = zeros(N,J) # Same as PS2.jl ...
        for j=1:J
            bigY[:,j] = y.==j
        end
        bigAlpha = [reshape(alpha,K,J-1) zeros(K)]
        
        T = promote_type(eltype(X),eltype(theta))
        num   = zeros(T,N,J)
        dem   = zeros(T,N)
        for j=1:J
            num[:,j] = exp.(X*bigAlpha[:,j] .+ (Z[:,j] .- Z[:,J])*gamma)
            dem .+= num[:,j]
        end
        
        P = num./repeat(dem,1,J)
        
        loglike = -sum( bigY.*log.(P) )
        
        return loglike
    end

startvals = [2*rand(7*size(X,2)).-1; .1] # 7 == J - 1
td = TwiceDifferentiable(theta -> mlogit_with_Z(theta, X, Z, y), startvals; autodiff = :forward)
# run the optimizer
theta_hat_optim_ad = optimize(td, startvals, LBFGS(), Optim.Options(g_tol = 1e-5, iterations=100_000, show_trace=true, show_every=50))
theta_hat_mle_ad = theta_hat_optim_ad.minimizer
# evaluate the Hessian at the estimates
H  = Optim.hessian!(td, theta_hat_mle_ad)
theta_hat_mle_ad_se = sqrt.(diag(inv(H)))
println([theta_hat_mle_ad theta_hat_mle_ad_se]) # these standard errors match Stata
#+END_SRC

* Question

Interpret the estimated coefficient $\hat{\gamma}$.

** Solution

The coefficient gamma represents the change in utility with a 1-unit change in log wages. More properly, \gamma/100 is the change in utility with a 1% increase in expected wage.

* Question

Estimate a nested logit with the following nesting structure:
- White collar occupations (indexed by $WC$)
    1. Professional/Technical 
    2. Managers/Administrators
    3. Sales 
- Blue collar occupations (indexed by $BC$)
    4. Clerical/Unskilled     
    5. Craftsmen              
    6. Operatives             
    7. Transport              
- Other occupations (indexed by $\text{Other}$)
    8. Other 
    
Specify the parameters such that there are only nest-level (rather than alternative-level) coefficients. That is, estimate a model with the following parameters:
- $\beta_{WC}$
- $\beta_{BC}$
- $\lambda_{WC}$
- $\lambda_{BC}$
- $\gamma$
- $\beta_{\text{Other}}$ is normalized to 0
- The formula for the choice probabilities will thus be
    \begin{align*}
        P_{ij} &= \begin{cases} \frac{\exp\left(\frac{X_{i}\beta_{WC}+\gamma(Z_{ij}-Z_{iJ})}{\lambda_{WC}}\right)\left[\sum_{\ell\in WC}\exp\left(\frac{X_{i}\beta_{WC}+\gamma(Z_{i\ell}-Z_{iJ})}{\lambda_{WC}}\right)\right]^{\lambda_{WC}-1}}{1+\left[\sum_{k\in WC}\exp\left(\frac{X_{i}\beta_{WC}+\gamma(Z_{ik}-Z_{iJ})}{\lambda_{WC}}\right)\right]^{\lambda_{WC}}+\left[\sum_{m\in BC}\exp\left(\frac{X_{i}\beta_{BC}+\gamma(Z_{im}-Z_{iJ})}{\lambda_{BC}}\right)\right]^{\lambda_{BC}}} ,& j\in WC\\
        \frac{\exp\left(\frac{X_{i}\beta_{BC}+\gamma(Z_{ij}-Z_{iJ})}{\lambda_{BC}}\right)\left[\sum_{\ell\in BC}\exp\left(\frac{X_{i}\beta_{BC}+\gamma(Z_{i\ell}-Z_{iJ})}{\lambda_{BC}}\right)\right]^{\lambda_{BC}-1}}{1+\left[\sum_{k\in WC}\exp\left(\frac{X_{i}\beta_{WC}+\gamma(Z_{ik}-Z_{iJ})}{\lambda_{WC}}\right)\right]^{\lambda_{WC}}+\left[\sum_{m\in BC}\exp\left(\frac{X_{i}\beta_{BC}+\gamma(Z_{im}-Z_{iJ})}{\lambda_{BC}}\right)\right]^{\lambda_{BC}}} ,& j\in BC\\
         \frac{1}{1+\left[\sum_{k\in WC}\exp\left(\frac{X_{i}\beta_{WC}+\gamma(Z_{ik}-Z_{iJ})}{\lambda_{WC}}\right)\right]^{\lambda_{WC}}+\left[\sum_{m\in BC}\exp\left(\frac{X_{i}\beta_{BC}+\gamma(Z_{im}-Z_{iJ})}{\lambda_{BC}}\right)\right]^{\lambda_{BC}}} ,& j=J
         \end{cases}
    \end{align*}

** Solution

#+BEGIN_SRC julia
function nested_logit_with_Z(theta, X, Z, y, nesting_structure)
        
        alpha = theta[1:end-3]
        lambda = theta[end-2:end-1]
        gamma = theta[end]
        K = size(X,2)
        J = length(unique(y))
        N = length(y)
        bigY = zeros(N,J)
        for j=1:J
            bigY[:,j] = y.==j
        end
        bigAlpha = [repeat(alpha[1:K],1,length(nesting_structure[1])) repeat(alpha[K+1:2K],1,length(nesting_structure[2])) zeros(K)]
        
        T = promote_type(eltype(X),eltype(theta))
        num   = zeros(T,N,J)
        lidx  = zeros(T,N,J)
        dem   = zeros(T,N)
        for j=1:J
            if j in nesting_structure[1]
                lidx[:,j] = exp.( (X*bigAlpha[:,j] .+ (Z[:,j] .- Z[:,J])*gamma)./lambda[1] )
            elseif j in nesting_structure[2]
                lidx[:,j] = exp.( (X*bigAlpha[:,j] .+ (Z[:,j] .- Z[:,J])*gamma)./lambda[2] )
            else
                lidx[:,j] = exp.(zeros(N))
            end
        end
        for j=1:J
            if j in nesting_structure[1]
                num[:,j] = lidx[:,j].*sum(lidx[:,nesting_structure[1][:]];dims=2).^(lambda[1]-1)
            elseif j in nesting_structure[2]
                num[:,j] = lidx[:,j].*sum(lidx[:,nesting_structure[2][:]];dims=2).^(lambda[2]-1)
            else
                num[:,j] = lidx[:,j]
            end
            dem .+= num[:,j]
        end
        
        P = num./repeat(dem,1,J)
        
        loglike = -sum( bigY.*log.(P) )
        
        return loglike
    end
nesting_structure = [[1 2 3], [4 5 6 7]] # This is a list with the mentioned nested structure

startvals = [2*rand(2*size(X,2)).-1; 
		1; 1; .1 # Unclear
		]    
# Same as before
td = TwiceDifferentiable(theta -> nested_logit_with_Z(theta, X, Z, y, nesting_structure), startvals; autodiff = :forward)
# run the optimizer
nlogit_theta_hat_optim_ad = optimize(td, startvals, LBFGS(), Optim.Options(g_tol = 1e-5, iterations=100_000, show_trace=true, show_every=50))
nlogit_theta_hat_mle_ad = nlogit_theta_hat_optim_ad.minimizer
# evaluate the Hessian at the estimates
H  = Optim.hessian!(td, nlogit_theta_hat_mle_ad)
nlogit_theta_hat_mle_ad_se = sqrt.(diag(inv(H)))
println([nlogit_theta_hat_mle_ad nlogit_theta_hat_mle_ad_se]) # these standard errors match Stata
#+END_SRC

#+BEGIN_SRC julia
    return nothing
end
wrapall()
#+END_SRC
